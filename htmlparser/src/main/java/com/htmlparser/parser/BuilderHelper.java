package com.htmlparser.parser;import android.graphics.Color;import android.text.Spanned;import android.text.style.CharacterStyle;import android.text.style.ParagraphStyle;import com.htmlparser.HtmlElement;import com.htmlparser.builder.builder.IndexGenerator;import com.htmlparser.builder.section.StyleSection;import com.htmlparser.builder.section.Section;import com.htmlparser.builder.section.SectionFactory;import com.htmlparser.parser.creator.Creators;import com.htmlparser.parser.creator.StyleClassCreator;import com.htmlparser.parser.creator.ParagraphStyleCreator;import com.htmlparser.parser.tagclass.BaseTagClass;import com.htmlparser.parser.tagclass.TagDiv;import com.htmlparser.parser.tagclass.TagListItem;import com.htmlparser.parser.tagclass.TagUnorderedList;import com.htmlparser.parser.style.BaseStyle;import com.htmlparser.parser.style.StyleMargin;import com.htmlparser.parser.style.StyleTextMargin;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedList;import java.util.List;public class BuilderHelper {    public static final String HEX_PATTERN = "^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6})";    public static final String RGB_FORMAT = "rgb";    /**     * Convert from 'rgb(0,0,0)'format to #000000 format     *     * @return formatted String     */    public static String convertFromRgbToHex(String rgb) {        String[] rgbNumbers = rgb.replaceAll("[^0-9,]", "").split(",");        int r = Integer.valueOf(rgbNumbers[0]);        int g = Integer.valueOf(rgbNumbers[1]);        int b = Integer.valueOf(rgbNumbers[2]);        return TextUtil.toHtmlColor(Color.rgb(r, g, b));    }    public static List<BaseStyle> parseStyleString(String styleString, ParserOptions parserOptions) {        List<BaseStyle> styleList = null;        String[] styles = styleString.split(";");        for (String style : styles) {            style = style.trim();            if (styleList == null) {                styleList = new LinkedList<BaseStyle>();            }            BaseStyle cssStyle = BaseStyle.parseFromString(style);            if (cssStyle != null && parserOptions != null) {                cssStyle.readOptions(parserOptions);            }            styleList.add(cssStyle);        }        return styleList;    }    /**     * Extracts CssStyles for paragraph.     *     * @param text     * @param paragraphStart     * @param paragraphEnd     * @return     */    public static List<BaseStyle> getParagraphCssStyles(Spanned text, int paragraphStart, int paragraphEnd) {        List<BaseStyle> cssStyleList = new ArrayList<BaseStyle>();        // Extract all ParagraphStyles        StyleClassCreator<ParagraphStyle> paragraphCreator = new ParagraphStyleCreator();        ParagraphStyle[] paragraphStyles = text.getSpans(paragraphStart, paragraphEnd, ParagraphStyle.class);        for (ParagraphStyle pStyle : paragraphStyles) {            BaseStyle[] stylesArray = paragraphCreator.create(pStyle);            for (BaseStyle style : stylesArray) {                if (style != null) {                    cssStyleList.add(style);                }            }        }        //Check for Margins. Required for line spacing.        boolean changed = false;        for (int i = 0; i < cssStyleList.size(); i++) {            BaseStyle cssStyle = cssStyleList.get(i);            if (cssStyle instanceof StyleTextMargin) {                changed = true;                String px = cssStyle.getValue();                px = px.replaceAll("\\D+", "");                cssStyleList.remove(i);                StyleMargin margin = new StyleMargin();                margin.setValue(px);                cssStyleList.add(i, margin);            }            if (cssStyle instanceof StyleMargin) {                changed = true;            }        }        if (!changed) {            StyleMargin margin = new StyleMargin();            margin.setValue(0);            cssStyleList.add(margin);        }        return cssStyleList;    }    public static List<BaseTagClass> extractClassesFromStyles(List<BaseStyle> styles) {        List<BaseTagClass> classesList = new ArrayList<BaseTagClass>(2);        BaseTagClass paragraphClass = null, listClass = null;        for (BaseStyle style : styles) {            if (paragraphClass == null) {                if (listClass instanceof TagUnorderedList) {                    paragraphClass = new TagListItem(HtmlElement.LI.toString() + IndexGenerator.generate(HtmlElement.LI));                } else {                    paragraphClass = new TagDiv(HtmlElement.DIV.toString() + IndexGenerator.generate(HtmlElement.DIV));                }            }            paragraphClass.addStyle(style);        }        if (listClass != null) {            classesList.add(listClass);        }        if (paragraphClass != null) {            classesList.add(paragraphClass);        }        return classesList;    }    public static List<Section> getTextSections(Spanned text, int start, int end, Creators creator, BaseTagClass parentClass) {        List<Section> sections = new ArrayList<Section>();        int nextWord;        for (int i = start; i <= end; i = nextWord) {            nextWord = text.nextSpanTransition(i, end, CharacterStyle.class);            CharacterStyle[] styles = text.getSpans(i, nextWord, CharacterStyle.class);            styles = removeExtractSpan(text, styles, i, nextWord);            Section section = SectionFactory.createSection(styles, i, nextWord, creator);            if (section.getStart() != section.getEnd()) {                sections.add(section);                if (section instanceof StyleSection) {                    BaseTagClass cssClass = ((StyleSection) section).getCssClass();                    //BaseTagClass can be null if we didnt recognize any style                    if (parentClass == null || cssClass == null) {                        if (nextWord == end) {                            break;                        }                        continue;                    }                    List<BaseStyle> parentStylesList = parentClass.getStylesList();                    for (BaseStyle one : parentStylesList) {                        final List<BaseStyle> sectionStylesList = cssClass.getStylesList();                        for (int k = 0; k < sectionStylesList.size(); k++) {                            BaseStyle two = sectionStylesList.get(k);                            if (one.equals(two)) {                                sectionStylesList.remove(k--);                            }                        }                    }                }            }            if (nextWord == end) {                break;            }        }        return sections;    }    /**     * Remove extra spans when save project     */    private static CharacterStyle[] removeExtractSpan(Spanned text, CharacterStyle[] styles, int index, int nextWord) {        ArrayList<CharacterStyle> stylesArr = new ArrayList<CharacterStyle>(Arrays.asList(styles));        for (int i = 0; i < stylesArr.size(); i++) {//CharacterStyle style : stylesArr){            if (text.getSpanStart(stylesArr.get(i)) > index                    || text.getSpanEnd(stylesArr.get(i)) < nextWord) {                stylesArr.remove(i);                i--;            }        }        styles = new CharacterStyle[stylesArr.size()];        stylesArr.toArray(styles); // fill the array        return styles;    }    public static HtmlElement getElementToWrapIn(List<BaseTagClass> classesList) {        HtmlElement element = HtmlElement.DIV;        for (BaseTagClass cssClass : classesList) {            if (cssClass instanceof TagUnorderedList) {                element = HtmlElement.UL;            } else if (cssClass instanceof TagListItem) {                element = element == HtmlElement.DIV ? HtmlElement.LI : element;            }        }        return element;    }    public static BaseTagClass getClassOfType(BaseTagClass.CssClassType type, List<BaseTagClass> cssClasses) {        for (BaseTagClass cssClass : cssClasses) {            if (cssClass == null) {                continue;            }            if (type.equals(cssClass.getClassType())) {                return cssClass;            }        }        return null;    }}